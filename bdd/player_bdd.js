require("dotenv").config();
const { Pool } = require("pg");
const s = require("../set");

// Configuration de la base de donn√©es
const dbUrl = s.SPDB;
const proConfig = {
  connectionString: dbUrl,
  ssl: {
    rejectUnauthorized: false,
  },
};

const pool = new Pool(proConfig);

// Fonction pour g√©n√©rer un ID unique
function generateUniqueId(name) {
  const timestamp = Date.now(); // Timestamp actuel
  return `${name}_${timestamp}`; // Combinaison du nom et du timestamp
}

// Cr√©ation des tables si elles n'existent pas encore
async function createTables() {
  const client = await pool.connect();
  try {
    await client.query(`
        CREATE TABLE IF NOT EXISTS player_profiles(
        id TEXT PRIMARY KEY,
        name TEXT UNIQUE NOT NULL,
         statut TEXT DEFAULT 'üïπÔ∏èPlayer',
         mode TEXT DEFAULT 'üÜìFree',
         supremus_cup INTEGER DEFAULT 0,
         division TEXT DEFAULT 'ü•âBronze',
         statut_abm TEXT DEFAULT 'aucun',
         statut_speed_rush TEXT DEFAULT 'aucun',
         statut_yugioh TEXT DEFAULT 'aucun',
         statut_origamy_world TEXT DEFAULT 'aucun',
         best_game TEXT DEFAULT 'aucun',
         defi_hebdo INTEGER DEFAULT 0,
         challenge INTEGER DEFAULT 0,
         victoires INTEGER DEFAULT 0,
         defaites INTEGER DEFAULT 0,
         forfaits INTEGER DEFAULT 0,
         top3 INTEGER DEFAULT 0,
         supremus_points INTEGER DEFAULT 0,
         box_vip TEXT DEFAULT 'aucun',
         heroes TEXT DEFAULT 'aucun',
         vehicles TEXT DEFAULT 'aucun',
         yugioh_deck TEXT DEFAULT 'aucun',
         skins TEXT DEFAULT 'aucun',
         rank TEXT DEFAULT 'aucun',
         xp INTEGER DEFAULT 0,
         sante INTEGER DEFAULT 0,
         energie INTEGER DEFAULT 0,
         heart INTEGER DEFAULT 0,
         faim INTEGER DEFAULT 0,
         soif INTEGER DEFAULT 0,
         reputation TEXT DEFAULT '0üé≠',
         items TEXT DEFAULT 'aucun',
         s_tokens INTEGER DEFAULT 0,
         s_gemmes INTEGER DEFAULT 0,
         coupons INTEGER DEFAULT 0,
         acceuil INTEGER DEFAULT 0,
         arbitrage INTEGER DEFAULT 0,
         transaction INTEGER DEFAULT 0,
         diffusion INTEGER DEFAULT 0,
         designs INTEGER DEFAULT 0,
         story INTEGER DEFAULT 0,
         balance INTEGER DEFAULT 0,
         depenses INTEGER DEFAULT 0,
         profits INTEGER DEFAULT 0,
         retraits INTEGER DEFAULT 0,
         solde INTEGER DEFAULT 0
      );
    `);
    console.log('Table cr√©√©e ou d√©j√† existante');
  } catch (error) {
    console.error('Erreur lors de la cr√©ation des tables:', error);
  } finally {
    client.release();
  }
}


// Supprime un profil de joueur
async function deletePlayerProfile(name) {
  const client = await pool.connect();
  try {
    const res = await client.query(
      `DELETE FROM player_profiles WHERE name = $1 RETURNING *;`,
      [name]
    );

    if (res.rowCount === 0) {
      console.log(`Aucun profil trouv√© √† supprimer : ${name}`);
      return false;
    }

    console.log(`Profil supprim√© : ${name}`);
    return true;
  } catch (error) {
    console.error('Erreur lors de la suppression du profil:', error);
    throw error;
  } finally {
    client.release();
  }
}


// Ins√®re un profil de joueur s'il n'existe pas d√©j√†
async function insertPlayerProfile(name) {
  const client = await pool.connect();
  try {
    await client.query('BEGIN'); // D√©but de la transaction

    const queryExistence = `
      SELECT 1 FROM player_profiles WHERE name = $1;
    `;
    const resultExistence = await client.query(queryExistence, [name]);

    if (resultExistence.rows.length > 0) {
      console.log(`Le profil du joueur ${name} existe d√©j√†.`);
      await client.query('COMMIT');
      return;
    }

    const id = generateUniqueId(name); // G√©n√©ration de l'ID
    const queryInsert = `
      INSERT INTO player_profiles(id, name)
      VALUES ($1, $2);
    `;
    await client.query(queryInsert, [id, name]);

    await client.query('COMMIT'); // Validation de la transaction
    console.log(`Profil du joueur cr√©√© avec succ√®s : Nom ${name}`);
  } catch (error) {
    await client.query('ROLLBACK'); // Annulation de la transaction en cas d'erreur
    console.error('Erreur lors de la cr√©ation du profil du joueur:', error);
  } finally {
    client.release();
  }
}

// R√©cup√®re les donn√©es du joueur
async function getPlayerProfile(name) {
  const client = await pool.connect();
  try {
    const query = `
      SELECT * FROM player_profiles WHERE name = $1;
    `;
    const result = await client.query(query, [name]);

    if (result.rows.length === 0) {
      console.log(`Joueur non trouv√© : ${name}`);
      return null;
    }
    return result.rows[0];
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration du profil du joueur:', error);
  } finally {
    client.release();
  }
}

// Met √† jour le profil du joueur
async function updatePlayerProfile(name, updates) {
  const client = await pool.connect();
  try {
    await client.query('BEGIN'); // D√©but de la transaction

    const setClauses = [];
    const values = [];
    let index = 1;

    for (const field in updates) {
      setClauses.push(`${field} = $${index}`);
      values.push(updates[field]);
      index++;
    }

    if (setClauses.length === 0) {
      console.log("Aucune mise √† jour fournie");
      await client.query('COMMIT');
      return;
    }

    const query = `
      UPDATE player_profiles
      SET ${setClauses.join(', ')}
      WHERE name = $${index}
      RETURNING *;
    `;
    values.push(name);

    const result = await client.query(query, values);
    if (result.rowCount === 0) {
      console.log(`Joueur non trouv√© pour mise √† jour : ${name}`);
      await client.query('COMMIT');
      return null;
    }

    await client.query('COMMIT'); // Validation de la transaction
    console.log(`Profil du joueur ${name} mis √† jour avec succ√®s`);
    return result.rows[0];
  } catch (error) {
    await client.query('ROLLBACK'); // Annulation de la transaction en cas d'erreur
    console.error('Erreur lors de la mise √† jour du profil du joueur:', error);
  } finally {
    client.release();
  }
}

// Cr√©e les tables √† l'initialisation
createTables();

module.exports = {
  insertPlayerProfile,
  getPlayerProfile,
  updatePlayerProfile,
  deletePlayerProfile 
};