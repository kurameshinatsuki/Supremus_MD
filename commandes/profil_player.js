const { zokou } = require('../framework/zokou');
const { insertPlayerProfile, getPlayerProfile, updatePlayerProfile, deletePlayerProfile } = require('../bdd/player_bdd');

const playerProfiles = { 
  'john': {
    nomCom: 'john',
    playerName: 'John S≈©prƒôm≈©s',
    imageUrl: 'https://i.ibb.co/cSxxrVFv/Image-2025-03-24-07-41-59-2.jpg'
  },
  'assistant': {
    nomCom: 'assistant',
    playerName: 'Assistant S≈©prƒôm≈©s',
    imageUrl: 'https://i.ibb.co/cSxxrVFv/Image-2025-03-24-07-41-59-2.jpg'
  }
};


function formatProfileMessage(data) {
  return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN PROFIL]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üÜî Nom :* ${data.name}  
> *‚ô®Ô∏è Statut :* ${data.statut}  
> *ü™Ä Mode :* ${data.mode}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[EXPLOITS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî 
> *üèÜ Supremus Cup :* ${data.supremus_cup}  
> *üßë‚Äçüßë‚Äçüßí‚Äçüßí DIVISION :* ${data.division}
> *üéÆ STATUT :*  
> - *ABM :* ${data.statut_abm}  
> - *SPEED RUSH :* ${data.statut_speed_rush}  
> - *YU-GI-OH :* ${data.statut_yugioh}  
> - *ORIGAMY WORLD :* ${data.statut_origamy_world}
> *üåü Best Game :* ${data.best_game}
> *üíØ D√©fi Hebdo :* ${data.defi_hebdo}
> *üë• Challenge :* ${data.challenge}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[STATS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üëä Battles :* V : 00${data.victoires} | D : 00${data.defaites} | L : 00${data.forfaits}   
> *üèÖTOP 3 :* 00${data.top3}  
> *üîπS Points :* ${data.supremus_points}
> *üéÅ Box VIP :* ${data.box_vip}
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[GAMES]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üé¥ Heroes :* ${data.heroes}  
> *üöó Vehicles :* ${data.vehicles} 
> *üÉè Yu-Gi-Oh :* ${data.yugioh_deck}  
> *üåê Origamy World Story :*  
> - *üöª Skins :* ${data.skins}  
> - *üéöÔ∏è Rank :* ${data.rank}
> - *‚≠ê XP :* ${data.xp}
> - *üëæ Stats :* ${data.sante}‚ù§Ô∏è | ${data.energie}üåÄ
> ${data.heart}ü´Ä | ${data.faim}üçΩÔ∏è
> ${data.soif}üç∂ | ${data.reputation}üé≠
> - *üéí Items :* ${data.items}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[MONEY]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üß≠ S Tokens :* ${data.s_tokens}üß≠  
> *üíé S Gemmes :* ${data.s_gemmes}üíé  
> *üéüÔ∏è Coupons :* ${data.coupons}üéüÔ∏è  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[COMPTEUR]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> - *ü´Ç Acceuil :* ${data.acceuil}  
> - *‚öñÔ∏è Arbitrage :* ${data.arbitrage}  
> - *ü§ù Transaction :* ${data.transaction}  
> - *üì£ Diffusion :* ${data.diffusion}  
> - *üé® Designs :* ${data.designs}  
> - *üåê Story :* ${data.story}  
> *üìü BALANCE :* ${data.balance}üß≠  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[ACCOUNT]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üí∞ D√©penses :* ${data.depenses}FCFA  
> *üíµ Profits :* ${data.profits}FCFA  
> *üèß Retraits :* ${data.retraits}FCFA  
> *üí≥ Solde :* ${data.solde}FCFA
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
}

for (const nomCom in playerProfiles) {
  zokou(
    {
      nomCom: nomCom,
      categorie: 'PLAYER-PROFIL'
    },
    async (dest, zk, commandeOptions) => {
      const { ms, repondre, arg, superUser } = commandeOptions;
      const profile = playerProfiles[nomCom];
      const playerName = profile.playerName;
      const imageUrl = profile.imageUrl;

      try {
        let data = await getPlayerProfile(playerName);

        if (!data) {
          await insertPlayerProfile(playerName);
          data = await getPlayerProfile(playerName);
          repondre(`Le profil du joueur ${playerName} a √©t√© cr√©√©.`);
        }

        if (!arg || arg.length === 0) {
          try {
            await zk.sendMessage(dest, { image: { url: imageUrl }, caption: formatProfileMessage(data) }, { quoted: ms });
          } catch (error) {
            console.error("Erreur lors de la r√©cup√©ration de l'image :", error);
            zk.sendMessage(dest, { text: formatProfileMessage(data) }, { quoted: ms });
          }
        } else if (superUser) {
          let updates = {};
          let fields = arg.join(' ').split(';');
          let changes = [];

          fields.forEach(fieldPair => {
            let operator = null;
            let field = null;
            let rawValue = null;

            // D√©tection correcte de l'op√©rateur
            if (fieldPair.includes('+=')) {
              [field, rawValue] = fieldPair.split('+=').map(item => item.trim());
              operator = 'add';
            } else if (fieldPair.includes('-=')) {
              [field, rawValue] = fieldPair.split('-=').map(item => item.trim());
              operator = 'remove';
            } else if (fieldPair.includes('=')) {
              [field, rawValue] = fieldPair.split('=').map(item => item.trim());
              operator = 'set';
            }

            if (!field || rawValue === undefined) return;

            const oldValue = data[field];
            if (oldValue === undefined) return;

            let newValue = oldValue;

            if (!isNaN(oldValue)) {
              // Champs num√©riques
              const numericVal = Number(rawValue);
              if (operator === 'add') {
                newValue = oldValue + numericVal;
              } else if (operator === 'remove') {
                newValue = oldValue - numericVal;
              } else {
                newValue = numericVal;
              }
            } else {
              // Champs texte
              const list = oldValue ? oldValue.split(',').map(s => s.trim()) : [];
              if (operator === 'add') {
                if (!list.includes(rawValue)) list.push(rawValue);
                newValue = list.join(', ');
              } else if (operator === 'remove') {
                newValue = list.filter(item => item !== rawValue).join(', ');
              } else {
                newValue = rawValue;
              }
            }

            if (newValue !== oldValue) {
              updates[field] = newValue;
              changes.push(`*${field}* : ${oldValue} -> ${newValue}`);
            }
          });

          if (Object.keys(updates).length > 0) {
            await updatePlayerProfile(playerName, updates);
            data = await getPlayerProfile(playerName);
            let confirmationMessage = `Mise √† jour du profil de ${playerName}:\n${changes.join('\n')}`;
            repondre(confirmationMessage);
          } else {
            repondre('Aucune modification d√©tect√©e.');
          }
        }
      } catch (error) {
        console.error("Erreur lors du traitement de la commande :", error);
        repondre('Une erreur est survenue lors du traitement de la commande.');
      }
    }
  );
};



zokou({
  nomCom: "delprofil",
  categorie: "DRPN",
  reaction: "üóëÔ∏è"
}, async (dest, zk, commandeOptions) => {
  const { arg, repondre, superUser } = commandeOptions;

  // 1. V√©rification s√©curit√©
  if (!superUser) {
    return repondre("üö´ Cette commande est r√©serv√©e au propri√©taire du bot.");
  }

  // 2. V√©rifie que le nom du joueur est fourni
  const name = arg.join(" ").trim();
  if (!name) {
    return repondre("‚ùó Veuillez sp√©cifier le nom du joueur √† supprimer.\nExemple : `-delprofil John`");
  }

  try {
    const resultat = await deletePlayerProfile(name);

    if (resultat) {
      await repondre(`‚úÖ Le profil de *${name}* a √©t√© supprim√© avec succ√®s.`);
    } else {
      await repondre(`‚ö†Ô∏è Aucun profil trouv√© pour le joueur *${name}*.`);
    }

  } catch (e) {
    console.error("Erreur lors de la suppression :", e);
    await repondre("‚ùå Une erreur est survenue lors de la suppression du profil.");
  }
});