const { zokou } = require('../framework/zokou');
const { 
  insertPlayerProfile, 
  getPlayerProfile, 
  updatePlayerProfile, 
  deletePlayerProfile 
} = require('../bdd/player_bdd');

// Configuration des profils pr√©d√©finis
const PREDEFINED_PROFILES = {
  'john': {
    displayName: 'John S≈©prƒôm≈©s',
    imageUrl: 'https://i.ibb.co/cSxxrVFv/Image-2025-03-24-07-41-59-2.jpg'
  },
  'assistant': {
    displayName: 'Assistant S≈©prƒôm≈©s',
    imageUrl: 'https://i.ibb.co/cSxxrVFv/Image-2025-03-24-07-41-59-2.jpg'
  }
};

// Sch√©ma de validation des champs
const FIELD_SCHEMA = {
  // Champs num√©riques
  NUMERIC: new Set([
    'victoires', 'defaites', 'forfaits', 'top3', 'supremus_points', 'box_vip',
    'xp', 'sante', 'energie', 'heart', 'faim', 'soif', 'reputation',
    's_tokens', 's_gemmes', 'coupons', 'acceuil', 'arbitrage', 'transaction',
    'diffusion', 'designs', 'story', 'balance', 'depenses', 'profits', 'retraits', 'solde'
  ]),
  
  // Champs de type liste
  LISTS: new Set([
    'heroes', 'vehicles', 'yugioh_deck', 'items', 'skins'
  ])
};

// Liste compl√®te des champs organis√©s par cat√©gories
const FIELD_CATEGORIES = {
  'PROFIL': ['name', 'statut', 'mode'],
  'EXPLOITS': ['supremus_cup', 'division', 'statut_abm', 'statut_speed_rush', 
               'statut_yugioh', 'statut_origamy_world', 'best_game', 'defi_hebdo', 'challenge'],
  'STATS': ['victoires', 'defaites', 'forfaits', 'top3', 'supremus_points', 'box_vip'],
  'GAMES': ['heroes', 'vehicles', 'yugioh_deck', 'skins', 'rank', 'xp', 
            'sante', 'energie', 'heart', 'faim', 'soif', 'reputation', 'items'],
  'MONEY': ['s_tokens', 's_gemmes', 'coupons'],
  'COMPTEUR': ['acceuil', 'arbitrage', 'transaction', 'diffusion', 'designs', 'story', 'balance'],
  'ACCOUNT': ['depenses', 'profits', 'retraits', 'solde']
};

// Messages constants
const MESSAGES = {
  ERRORS: {
    INVALID_FORMAT: "‚ùå Format de commande invalide. *Utilisation :* champ1=value1; champ2+=value2",
    FIELD_NOT_EXIST: "Le champ *%s* n'existe pas",
    NUMERIC_REQUIRED: "‚ùå La valeur pour *%s* doit √™tre num√©rique",
    LIST_OPERATION: "‚ùå L'op√©ration *%s* n'est pas autoris√©e pour le champ texte *%s*",
    DB_ERROR: "‚ùå Erreur base de donn√©es",
    IMAGE_LOAD: "‚ö†Ô∏è Impossible de charger l'image du profil",
    PERMISSION_DENIED: "üö´ Action r√©serv√©e √† l'administration."
  },
  SUCCESS: {
    PROFILE_CREATED: "_‚úÖ Profil joueur *%s* cr√©√© avec succ√®s_",
    PROFILE_UPDATED: "_‚úÖ Profil *%s* mis √† jour avec succ√®s_",
    PROFILE_DELETED: "_‚úÖ Profil de %s supprim√© avec succ√®s_"
  },
  INFO: {
    NO_CHANGES: "‚ÑπÔ∏è Aucune modification effectu√©e",
    PROFILE_NOT_FOUND: "‚ÑπÔ∏è Profil *%s* non trouv√©",
    FIELD_LIST: "*üìã LISTE DES CHAMPS MODIFIABLES :*"
  }
};

/**
 * Formatte le message du profil joueur
 */
function formatProfileMessage(data) {
  return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN PROFIL]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üÜî Nom :* ${data.name}  
> *‚ô®Ô∏è Statut :* ${data.statut}  
> *ü™Ä Mode :* ${data.mode}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[EXPLOITS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî 
> *üèÜ Supremus Cup :* ${data.supremus_cup}  
> *üßë‚Äçüßë‚Äçüßí‚Äçüßí DIVISION :* ${data.division}
> *üéÆ STATUT :*  
> - *ABM :* ${data.statut_abm}  
> - *SPEED RUSH :* ${data.statut_speed_rush}  
> - *YU-GI-OH :* ${data.statut_yugioh}  
> - *ORIGAMY WORLD :* ${data.statut_origamy_world}
> *üåü Best Game :* ${data.best_game}
> *üíØ D√©fi Hebdo :* ${data.defi_hebdo}
> *üë• Challenge :* ${data.challenge}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[STATS]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üëä Battles :* V : 00${data.victoires} | D : 00${data.defaites} | L : 00${data.forfaits}   
> *üèÖTOP 3 :* 00${data.top3}  
> *üîπS Points :* ${data.supremus_points}
> *üéÅ Box VIP :* ${data.box_vip}
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[GAMES]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üé¥ Heroes :* ${data.heroes}  
> *üöó Vehicles :* ${data.vehicles} 
> *üÉè Yu-Gi-Oh :* ${data.yugioh_deck}  
> *üåê Origamy World Story :*  
> - *üöª Skins :* ${data.skins}  
> - *üéöÔ∏è Rank :* ${data.rank}
> - *‚≠ê XP :* ${data.xp}
> - *üëæ Stats :* ${data.sante}‚ù§Ô∏è | ${data.energie}üåÄ
> ${data.heart}ü´Ä | ${data.faim}üçΩÔ∏è
> ${data.soif}üç∂ | ${data.reputation}üé≠
> - *üéí Items :* ${data.items}  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[MONEY]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üß≠ S Tokens :* ${data.s_tokens}üß≠  
> *üíé S Gemmes :* ${data.s_gemmes}üíé  
> *üéüÔ∏è Coupons :* ${data.coupons}üéüÔ∏è  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[COMPTEUR]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> - *ü´Ç Acceuil :* ${data.acceuil}  
> - *‚öñÔ∏è Arbitrage :* ${data.arbitrage}  
> - *ü§ù Transaction :* ${data.transaction}  
> - *üì£ Diffusion :* ${data.diffusion}  
> - *üé® Designs :* ${data.designs}  
> - *üåê Story :* ${data.story}  
> *üìü BALANCE :* ${data.balance}üß≠  
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[ACCOUNT]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
> *üí∞ D√©penses :* ${data.depenses}FCFA  
> *üíµ Profits :* ${data.profits}FCFA  
> *üèß Retraits :* ${data.retraits}FCFA  
> *üí≥ Solde :* ${data.solde}FCFA
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
}

/**
 * Traite les op√©rations de mise √† jour avec suivi d√©taill√©
 */
function processProfileUpdates(data, command) {
  const updates = {};
  const successfulChanges = [];
  const failedChanges = [];
  
  const fieldPairs = command.split(';').map(pair => pair.trim());
  
  for (const fieldPair of fieldPairs) {
    if (!fieldPair) continue;
    
    let operator = null;
    let field = null;
    let rawValue = null;
    
    // D√©tection de l'op√©rateur
    if (fieldPair.includes('+=')) {
      [field, rawValue] = fieldPair.split('+=').map(item => item.trim());
      operator = 'add';
    } else if (fieldPair.includes('-=')) {
      [field, rawValue] = fieldPair.split('-=').map(item => item.trim());
      operator = 'remove';
    } else if (fieldPair.includes('=')) {
      [field, rawValue] = fieldPair.split('=').map(item => item.trim());
      operator = 'set';
    } else {
      failedChanges.push({
        field: fieldPair,
        error: MESSAGES.ERRORS.INVALID_FORMAT
      });
      continue;
    }
    
    // Validation du champ
    if (!data.hasOwnProperty(field)) {
      failedChanges.push({
        field,
        value: rawValue,
        error: MESSAGES.ERRORS.FIELD_NOT_EXIST.replace('%s', field)
      });
      continue;
    }
    
    try {
      const oldValue = data[field];
      let newValue = oldValue;
      
      // Traitement des champs num√©riques
      if (FIELD_SCHEMA.NUMERIC.has(field)) {
        const numericValue = Number(rawValue);
        
        if (isNaN(numericValue)) {
          failedChanges.push({
            field,
            value: rawValue,
            error: MESSAGES.ERRORS.NUMERIC_REQUIRED.replace('%s', field)
          });
          continue;
        }
        
        switch (operator) {
          case 'add': newValue = oldValue + numericValue; break;
          case 'remove': newValue = oldValue - numericValue; break;
          default: newValue = numericValue;
        }
      }
      // Traitement des listes
      else if (FIELD_SCHEMA.LISTS.has(field)) {
        const list = oldValue ? oldValue.split(',').map(item => item.trim()) : [];
        
        switch (operator) {
          case 'add':
            const itemsToAdd = rawValue.split(',').map(item => item.trim());
            itemsToAdd.forEach(item => {
              if (!list.includes(item)) list.push(item);
            });
            newValue = list.join(', ');
            break;
          case 'remove':
            const itemsToRemove = rawValue.split(',').map(item => item.trim());
            newValue = list.filter(item => !itemsToRemove.includes(item)).join(', ');
            break;
          default:
            newValue = rawValue;
        }
      }
      // Traitement des champs texte simples
      else {
        if (operator !== 'set') {
          failedChanges.push({
            field,
            value: rawValue,
            error: MESSAGES.ERRORS.LIST_OPERATION
              .replace('%s', operator)
              .replace('%s', field)
          });
          continue;
        }
        newValue = rawValue;
      }
      
      // Enregistrement des modifications
      if (newValue !== oldValue) {
        updates[field] = newValue;
        successfulChanges.push({
          field,
          oldValue,
          newValue
        });
      }
    } catch (error) {
      failedChanges.push({
        field,
        value: rawValue,
        error: error.message
      });
    }
  }
  
  return { updates, successfulChanges, failedChanges };
}

/**
 * Formatte les r√©sultats des modifications pour l'affichage
 */
function formatUpdateResults(profileName, successfulChanges, failedChanges) {
  let response = `ü™Ä *D√âTAILS MISE √Ä JOUR POUR :* ${profileName}*\n\n`;
  
  // Affichage des succ√®s
  if (successfulChanges.length > 0) {
    response += "‚úÖ *Modifications r√©ussies:*\n";
    successfulChanges.forEach(change => {
      response += `‚Ä¢ *${change.field}:* ${change.oldValue} ‚û°Ô∏è ${change.newValue}\n`;
    });
    response += "\n";
  }
  
  // Affichage des √©checs
  if (failedChanges.length > 0) {
    response += "‚ùå *√âchecs de modification:*\n";
    failedChanges.forEach(fail => {
      response += `‚Ä¢ *${fail.field}=${fail.value}:* ${fail.error}\n`;
    });
    response += "\n";
  }
  
  // Suggestions si √©checs
  if (failedChanges.length > 0) {
    response += "üí° *CONSEILS:*\n";
    response += "- V√©rifiez l'orthographe des champs avec `-champs`\n";
    response += "- Pour les nombres, utilisez seulement des chiffres\n";
    response += "- Format: `champ=valeur` ou `champ+=valeur`\n";
  }
  
  return response;
}

// Enregistrement des commandes de profil
Object.entries(PREDEFINED_PROFILES).forEach(([command, profile]) => {
  zokou({
    nomCom: command,
    categorie: 'PLAYER-PROFIL',
    reaction: 'üë§',
    desc: `Affiche ou modifie le profil ${profile.displayName}`
  }, async (dest, zk, { ms, repondre, arg, superUser }) => {
    try {
      // R√©cup√©ration ou cr√©ation du profil
      let playerData = await getPlayerProfile(profile.displayName);
      
      if (!playerData) {
        await insertPlayerProfile(profile.displayName);
        playerData = await getPlayerProfile(profile.displayName);
        repondre(MESSAGES.SUCCESS.PROFILE_CREATED.replace('%s', profile.displayName));
      }
      
      // Affichage simple du profil
      if (!arg || arg.length === 0) {
        try {
          await zk.sendMessage(
            dest, 
            { 
              image: { url: profile.imageUrl }, 
              caption: formatProfileMessage(playerData) 
            }, 
            { quoted: ms }
          );
        } catch (imageError) {
          console.error('Erreur image:', imageError);
          await zk.sendMessage(
            dest, 
            { text: formatProfileMessage(playerData) }, 
            { quoted: ms }
          );
        }
        return;
      }
      
      // V√©rification des permissions admin
      if (!superUser) {
        repondre(MESSAGES.ERRORS.PERMISSION_DENIED);
        return;
      }
      
      // Traitement des modifications
      const { updates, successfulChanges, failedChanges } = processProfileUpdates(
        playerData,
        arg.join(' ')
      );
      
      // Application des modifications
      if (Object.keys(updates).length > 0) {
        await updatePlayerProfile(profile.displayName, updates);
      }
      
      // Construction de la r√©ponse
      if (successfulChanges.length > 0 || failedChanges.length > 0) {
        repondre(formatUpdateResults(
          profile.displayName,
          successfulChanges,
          failedChanges
        ));
      } else {
        repondre(MESSAGES.INFO.NO_CHANGES);
      }
      
    } catch (error) {
      console.error('Erreur commande:', error);
      repondre(`${MESSAGES.ERRORS.DB_ERROR}: ${error.message}`);
    }
  });
});

// Commande pour lister les champs disponibles
zokou({
  nomCom: "champs",
  categorie: "PLAYER-PROFIL",
  reaction: "üìã",
  desc: "Affiche la liste des champs modifiables"
}, async (dest, zk, { repondre }) => {
  let message = `${MESSAGES.INFO.FIELD_LIST}\n\n`;
  
  // Construction du message par cat√©gories
  Object.entries(FIELD_CATEGORIES).forEach(([category, fields]) => {
    message += `*${category}* :\n`;
    message += `${fields.join(', ')}\n\n`;
  });
  
  message += "üí° *USAGE* :\n";
  message += "- `champ=valeur` : D√©finit une valeur\n";
  message += "- `champ+=valeur` : Ajoute √† la valeur existante\n";
  message += "- `champ-=valeur` : Retire de la valeur existante\n";
  message += "- S√©parer plusieurs modifications par `;`";
  
  repondre(message);
});

// Commande de suppression de profil
zokou({
  nomCom: "delprofil",
  categorie: "DRPN",
  reaction: "üóëÔ∏è",
  desc: "Supprime un profil joueur (admin)"
}, async (dest, zk, { arg, repondre, superUser }) => {
  try {
    // V√©rification permission
    if (!superUser) {
      return repondre(MESSAGES.ERRORS.PERMISSION_DENIED);
    }
    
    const playerName = arg.join(" ").trim();
    
    // Validation nom joueur
    if (!playerName) {
      return repondre("‚ùó Sp√©cifiez un nom de joueur");
    }
    
    // Suppression profil
    const result = await deletePlayerProfile(playerName);
    
    repondre(result ?
      MESSAGES.SUCCESS.PROFILE_DELETED.replace('%s', playerName) :
      MESSAGES.INFO.PROFILE_NOT_FOUND.replace('%s', playerName)
    );
    
  } catch (error) {
    console.error('Erreur suppression:', error);
    repondre(`${MESSAGES.ERRORS.DB_ERROR}: ${error.message}`);
  }
});