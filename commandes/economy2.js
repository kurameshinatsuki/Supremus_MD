// buypack.js
const { zokou } = require('../framework/zokou');
const { getPlayerProfile, updatePlayerProfile } = require('../bdd/player_bdd');

// Configuration des packs
const PACK_CONFIG = {
  PRICES: {
    'ü•â bronze': 150,
    'ü•à argent': 200,
    'ü•á or': 250,
    'üèÖ special': 300
  },
  
  PROBABILITIES: {
    'ü•â bronze': { common: 70, rare: 15, epic: 10, legendary: 5 },
    'ü•à argent': { common: 45, rare: 30, epic: 15, legendary: 10 },
    'ü•á or': { common: 10, rare: 45, epic: 35, legendary: 10 },
    'üèÖ special': { common: 5, rare: 30, epic: 30, legendary: 35 }
  },
  
  CONTENTS_COUNT: {
    'ü•â bronze': 3,
    'ü•à argent': 3,
    'ü•á or': 4,
    'üèÖ special': 5
  },
  
  BONUS_RANGES: {
    tokens: { min: 10, max: 50 },
    gemmes: { min: 5, max: 30 },
    coupons: { min: 5, max: 35 }
  }
};

// Donn√©es des jeux et contenus
const GAME_DATA = {
  'ABM': {
    name: 'Anime Battle Multivers',
    contents: {
      common: [
        { name: 'Naruto: Mode Sage', description: 'Ma√Ætrise des techniques senjutsu' },
        { name: 'Goku: Base Form', description: 'Forme de combat standard' },
        { name: 'Luffy: Gear Second', description: 'Augmentation de la vitesse' },
        { name: 'Ichigo: Shikai', description: 'Forme initiale de Zanpakut≈ç' },
        { name: 'Saitama: Normal Punch', description: 'Coup normal mais puissant' }
      ],
      rare: [
        { name: 'Naruto: Mode Kurama', description: 'Contr√¥le partiel du renard √† neuf queues' },
        { name: 'Goku: Super Saiyan', description: 'Transformation l√©gendaire' },
        { name: 'Luffy: Gear Fourth', description: 'Forme de combat avanc√©e' },
        { name: 'Ichigo: Bankai', description: 'Forme ultime de Zanpakut≈ç' },
        { name: 'Saitama: Serious Punch', description: 'Coup s√©rieux extr√™mement puissant' }
      ],
      epic: [
        { name: 'Naruto: Mode Baryon', description: 'Fusion d\'√©nergie avec Kurama' },
        { name: 'Goku: Ultra Instinct', description: 'Technique divine de combat' },
        { name: 'Luffy: Gear Fifth', description: 'Forme mythique de lib√©ration' },
        { name: 'Ichigo: Full Hollow', description: 'Forme hollow compl√®te' },
        { name: 'Saitama: Ultimate Technique', description: 'Technique ultime impr√©visible' }
      ],
      legendary: [
        { name: 'Naruto: Six Paths Sage Mode', description: 'Mode sage des six chemins' },
        { name: 'Goku: Ultra Instinct Mastered', description: 'Ma√Ætrise compl√®te de l\'instinct ultime' },
        { name: 'Luffy: Sun God Nika', description: 'Forme divine de lib√©ration' },
        { name: 'Ichigo: True Bankai', description: 'Forme v√©ritable de Zanpakut≈ç' },
        { name: 'Saitama: Cosmic Fear', description: 'Puissance cosmique illimit√©e' }
      ]
    }
  },
  'Speed Rush': {
    name: 'Speed Rush',
    contents: {
      common: [
        { name: 'Toyota AE86', description: 'L√©gendaire coureur des montagnes' },
        { name: 'Nissan Skyline R34', description: 'Ic√¥ne de la culture JDM' },
        { name: 'Mazda RX-7', description: 'Voiture √† moteur rotatif' },
        { name: 'Honda Civic Type R', description: 'Compacte performante' },
        { name: 'Subaru Impreza WRX STI', description: 'Traction int√©grale rallye' }
      ],
      rare: [
        { name: 'Nissan GT-R R35', description: 'Supercar japonaise' },
        { name: 'Porsche 911 GT3', description: 'Pr√©cision allemande' },
        { name: 'Chevrolet Corvette C8', description: 'Sportive am√©ricaine' },
        { name: 'BMW M4 GTS', description: 'Performance track-focused' },
        { name: 'Audi R8 V10', description: 'Supercar quotidienne' }
      ],
      epic: [
        { name: 'Ferrari 488 Pista', description: 'Pur-sang italien' },
        { name: 'Lamborghini Huracan STO', description: 'Supercar extreme' },
        { name: 'McLaren 720S', description: 'Engineering excellence' },
        { name: 'Porsche 918 Spyder', description: 'Hybride hypercar' },
        { name: 'Ford GT', description: 'H√©ritage racing' }
      ],
      legendary: [
        { name: 'Bugatti Chiron Super Sport', description: 'Ultimate speed machine' },
        { name: 'Koenigsegg Jesko Absolut', description: 'Hypercar su√©doise' },
        { name: 'Pagani Huayra BC', description: '≈íuvre d\'art m√©canique' },
        { name: 'Aston Martin Valkyrie', description: 'Hypercar F1-inspired' },
        { name: 'McLaren Speedtail', description: 'Hyper-GT ultime' }
      ]
    }
  },
  'Yu-Gi-Oh': {
    name: 'Yu-Gi-Oh Speed Duel',
    contents: {
      common: [
        { name: 'Dark Magician', description: 'Magicien sombre l√©gendaire' },
        { name: 'Blue-Eyes White Dragon', description: 'Dragon blanc aux yeux bleus' },
        { name: 'Red-Eyes Black Dragon', description: 'Dragon noir aux yeux rouges' },
        { name: 'Summoned Skull', description: 'D√©mon invoqu√©' },
        { name: 'Celtic Guardian', description: 'Garde celte' }
      ],
      rare: [
        { name: 'Dark Magician Girl', description: 'Apprentie magicienne' },
        { name: 'Blue-Eyes Ultimate Dragon', description: 'Fusion ultime' },
        { name: 'Red-Eyes Darkness Dragon', description: '√âvolution t√©n√©breuse' },
        { name: 'Buster Blader', description: 'Pourfendeur de dragons' },
        { name: 'Gaia The Fierce Knight', description: 'Chevalier f√©roce' }
      ],
      epic: [
        { name: 'Slifer the Sky Dragon', description: 'Dragon divin √©gyptien' },
        { name: 'Obelisk the Tormentor', description: 'Dieu √©gyptien du jugement' },
        { name: 'The Winged Dragon of Ra', description: 'Dieu √©gyptien supr√™me' },
        { name: 'Exodia the Forbidden One', description: 'Cr√©ature scell√©e' },
        { name: 'Black Luster Soldier', description: 'Soldat du chaos' }
      ],
      legendary: [
        { name: 'Stardust Dragon', description: 'Dragon des souhaits' },
        { name: 'Number 39: Utopia', description: 'Guerrier de l\'espoir' },
        { name: 'Firewall Dragon', description: 'Dragon cyberse' },
        { name: 'Ash Blossom & Joyous Spring', description: 'Spirit hand trap' },
        { name: 'Accesscode Talker', description: 'Final boss cyberse' }
      ]
    }
  },
  'Origamy World': {
    name: 'Origamy World',
    contents: {
      common: [
        { name: 'Paper Crane', description: 'Grue en papier traditionnelle' },
        { name: 'Paper Samurai', description: 'Guerrier japonais en papier' },
        { name: 'Paper Dragon', description: 'Dragon l√©gendaire en papier' },
        { name: 'Paper Phoenix', description: 'Ph√©nix renaissant en papier' },
        { name: 'Paper Ninja', description: 'Assassin silencieux en papier' }
      ],
      rare: [
        { name: 'Origami Beast', description: 'Cr√©ature mythique en papier' },
        { name: 'Paper Elemental', description: '√ätre √©l√©mentaire en papier' },
        { name: 'Folding Guardian', description: 'Protecteur en papier pli√©' },
        { name: 'Paper Sorcerer', description: 'Mage manipulant le papier' },
        { name: 'Crane Warrior', description: 'Guerrier-grue en papier' }
      ],
      epic: [
        { name: 'Thousand Paper Cranes', description: 'Arm√©e de grues en papier' },
        { name: 'Origami Dragon Lord', description: 'Seigneur dragon en papier' },
        { name: 'Paper Kingdom', description: 'Royaume entier en papier' },
        { name: 'Folding Titan', description: 'G√©ant de papier pli√©' },
        { name: 'Origami Deity', description: 'Divinit√© du papier pli√©' }
      ],
      legendary: [
        { name: 'Infinite Fold', description: 'Technique de pliage infinie' },
        { name: 'Paper Universe', description: 'Univers complet en papier' },
        { name: 'Origami Creator', description: 'Cr√©ateur de r√©alit√©s en papier' },
        { name: 'Eternal Crane', description: 'Grue √©ternelle en papier' },
        { name: 'World Folder', description: 'Ma√Ætre du pliage mondial' }
      ]
    }
  }
};

// Fonction pour g√©n√©rer un ID de transaction unique
function generateTransactionId() {
  return Math.random().toString(16).substring(2, 14);
}

// Fonction pour choisir un contenu bas√© sur la raret√©
function chooseContentByRarity(game, rarity) {
  const contents = GAME_DATA[game].contents[rarity];
  return contents[Math.floor(Math.random() * contents.length)];
}

// Fonction pour g√©n√©rer les gains d'un pack
function generatePackRewards(game, packType) {
  const rewards = {
    contents: [],
    bonuses: {
      tokens: Math.floor(Math.random() * 
        (PACK_CONFIG.BONUS_RANGES.tokens.max - PACK_CONFIG.BONUS_RANGES.tokens.min + 1)) + 
        PACK_CONFIG.BONUS_RANGES.tokens.min,
      gemmes: Math.floor(Math.random() * 
        (PACK_CONFIG.BONUS_RANGES.gemmes.max - PACK_CONFIG.BONUS_RANGES.gemmes.min + 1)) + 
        PACK_CONFIG.BONUS_RANGES.gemmes.min,
      coupons: Math.floor(Math.random() * 
        (PACK_CONFIG.BONUS_RANGES.coupons.max - PACK_CONFIG.BONUS_RANGES.coupons.min + 1)) + 
        PACK_CONFIG.BONUS_RANGES.coupons.min
    }
  };

  const probabilities = PACK_CONFIG.PROBABILITIES[packType];
  const contentCount = PACK_CONFIG.CONTENTS_COUNT[packType];

  for (let i = 0; i < contentCount; i++) {
    const rand = Math.random() * 100;
    let rarity;

    if (rand <= probabilities.common) {
      rarity = 'common';
    } else if (rand <= probabilities.common + probabilities.rare) {
      rarity = 'rare';
    } else if (rand <= probabilities.common + probabilities.rare + probabilities.epic) {
      rarity = 'epic';
    } else {
      rarity = 'legendary';
    }

    rewards.contents.push({
      ...chooseContentByRarity(game, rarity),
      rarity: rarity
    });
  }

  // Bonus pour les packs or et sp√©cial (chance d'avoir un contenu commun suppl√©mentaire)
  if ((packType === 'ü•á or' || packType === 'üèÖ special') && Math.random() < 0.3) {
    rewards.contents.push({
      ...chooseContentByRarity(game, 'common'),
      rarity: 'common',
      bonus: true
    });
  }

  return rewards;
}

// Fonction pour formater le message du menu des jeux
function formatGameMenu(playerName, balance) {
  return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN - BOUTIQUE]‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
üë§ *Joueur :* ${playerName}
üí≥ *Solde coupons :* ${balance}üéüÔ∏è

*üéÆ CHOISISSEZ UN JEU :*

1. üé≠ *ABM* - Anime Battle Multivers
2. üöó *Speed Rush* - Course de v√©hicules
3. üÉè *Yu-Gi-Oh* - Speed Duel
4. üìú *Origamy World* - Monde de papier

*üí° Utilisation :*
R√©pondez avec le num√©ro du jeu
Exemple : *1* pour ABM

‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[SELECTION]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
}

// Fonction pour formater le message des packs
function formatPackMenu(playerName, game, balance) {
  const gameName = GAME_DATA[game].name;
  
  return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN - BOUTIQUE]‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
üë§ *Joueur :* ${playerName}
üéÆ *Jeu :* ${gameName}
üí≥ *Solde coupons :* ${balance}üéüÔ∏è

*üì¶ CHOISISSEZ UN PACK :*

1. ü•â *Bronze* - 150üéüÔ∏è
   ‚Ä¢ 3 contenus
   ‚Ä¢ Bonus: tokens, gemmes, coupons
   ‚Ä¢ Raret√©: Commun 70%, Rare 15%, √âpique 10%, L√©gendaire 5%

2. ü•à *Argent* - 200üéüÔ∏è
   ‚Ä¢ 3 contenus  
   ‚Ä¢ Bonus am√©lior√©s
   ‚Ä¢ Raret√©: Commun 45%, Rare 30%, √âpique 15%, L√©gendaire 10%

3. ü•á *Or* - 250üéüÔ∏è
   ‚Ä¢ 4 contenus
   ‚Ä¢ Chance de contenu bonus
   ‚Ä¢ Raret√©: Commun 10%, Rare 45%, √âpique 35%, L√©gendaire 10%

4. üèÖ *Sp√©cial* - 300üéüÔ∏è
   ‚Ä¢ 5 contenus
   ‚Ä¢ Meilleurs bonus + chance de contenu bonus
   ‚Ä¢ Raret√©: Commun 5%, Rare 30%, √âpique 30%, L√©gendaire 35%

*üí° Utilisation :*
R√©pondez avec le num√©ro du pack
Exemple : *1* pour Bronze

‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[SELECTION]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
}

// Fonction pour formater le message de confirmation
function formatConfirmation(playerName, game, packType, price, balance) {
  const gameName = GAME_DATA[game].name;
  
  return `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN - CONFIRMATION]‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
üë§ *Joueur :* ${playerName}
üéÆ *Jeu :* ${gameName}
üì¶ *Pack :* ${packType}
üí∞ *Prix :* ${price}üéüÔ∏è
üí≥ *Solde actuel :* ${balance}üéüÔ∏è
üí≥ *Nouveau solde :* ${balance - price}üéüÔ∏è

*‚ö†Ô∏è CONFIRMER L'ACHAT ?*

*‚úÖ OUI* - Confirmer l'achat
*‚ùå NON* - Annuler l'achat

R√©pondez avec *oui* ou *non*

‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì[CONFIRMATION]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;
}

// Fonction pour formater le re√ßu de transaction
function formatReceipt(transactionId, playerName, game, packType, price, rewards, newBalance) {
  const gameName = GAME_DATA[game].name;
  const now = new Date();
  const dateTime = now.toLocaleString('fr-FR');
  
  let receipt = `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*‚ñì‚ñì‚ñì‚ñì‚ñì[SRPN - RE√áU]‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
*üÜî Transact ID :* ${transactionId}

> *üìå Type :* üí∞ Achat  
> *üë§ Exp√©diteur :* ${playerName}
> *üéØ Transaction :* Achat d'un pack ${gameName} de type ${packType}
‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
*üí∞ D√©tails de la transaction :*
> *üì¶ Gain(s) re√ßu(s) :*\n`;

  // Ajouter les contenus
  rewards.contents.forEach(content => {
    const bonusText = content.bonus ? " (Bonus)" : "";
    receipt += `> - ${content.name} | ${content.rarity}${bonusText}\n`;
  });

  // Ajouter les bonus
  receipt += `> - ${rewards.bonus.coupons} Coupons\n`;
  receipt += `> - ${rewards.bonus.gemmes} Supremus Gemmes\n`;
  receipt += `> - ${rewards.bonus.tokens} Supremus Tokens\n`;

  receipt += `> *üí∏ Montant d√©bit√© :* -${price} coupons\n`;
  receipt += `> *üí∞ Nouveau solde :* ${newBalance} coupons\n`;
  receipt += `‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n`;
  receipt += `üïí *Date & Heure :* ${dateTime}\n`;
  receipt += `üîÑ *Statut :* valider\n`;
  receipt += `‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n`;
  receipt += `*‚ñì‚ñì‚ñì‚ñì‚ñì[TRAITEMENT...]‚ñì‚ñì‚ñì‚ñì‚ñì*\n`;
  receipt += `‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî`;

  return receipt;
}

// Commande principale buypack
zokou({
  nomCom: "buypack",
  categorie: "SRPN",
  reaction: "üõí",
  desc: "Acheter des packs de jeux avec des coupons"
}, async (dest, zk, { ms, repondre, auteurMessage, nomAuteurMessage }) => {
  try {
    // R√©cup√©rer le profil du joueur
    let playerData = await getPlayerProfile(nomAuteurMessage);
    
    if (!playerData) {
      return repondre("‚ùå Vous n'avez pas de profil joueur. Utilisez d'abord une commande de profil comme !sigma pour en cr√©er un.");
    }

    // V√©rifier le solde de coupons
    const coupons = parseInt(playerData.coupons) || 0;
    
    // √âtape 1: Afficher le menu des jeux
    const gameMenu = formatGameMenu(nomAuteurMessage, coupons);
    await zk.sendMessage(dest, { text: gameMenu }, { quoted: ms });

    // √âcouter la r√©ponse pour le choix du jeu
    const gameResponse = await zk.waitForMessage(dest, auteurMessage, 30000); // 30 secondes timeout
    
    if (!gameResponse) {
      return repondre("‚è±Ô∏è Temps √©coul√©. Veuillez relancer la commande.");
    }

    const gameChoice = gameResponse.text.trim();
    let selectedGame = null;

    switch (gameChoice) {
      case '1': selectedGame = 'ABM'; break;
      case '2': selectedGame = 'Speed Rush'; break;
      case '3': selectedGame = 'Yu-Gi-Oh'; break;
      case '4': selectedGame = 'Origamy World'; break;
      default: 
        return repondre("‚ùå Choix invalide. Veuillez relancer la commande.");
    }

    // √âtape 2: Afficher le menu des packs
    const packMenu = formatPackMenu(nomAuteurMessage, selectedGame, coupons);
    await zk.sendMessage(dest, { text: packMenu }, { quoted: ms });

    // √âcouter la r√©ponse pour le choix du pack
    const packResponse = await zk.waitForMessage(dest, auteurMessage, 30000);
    
    if (!packResponse) {
      return repondre("‚è±Ô∏è Temps √©coul√©. Veuillez relancer la commande.");
    }

    const packChoice = packResponse.text.trim();
    let selectedPack = null;
    let packPrice = 0;

    switch (packChoice) {
      case '1': 
        selectedPack = 'ü•â bronze';
        packPrice = PACK_CONFIG.PRICES[selectedPack];
        break;
      case '2': 
        selectedPack = 'ü•à argent';
        packPrice = PACK_CONFIG.PRICES[selectedPack];
        break;
      case '3': 
        selectedPack = 'ü•á or';
        packPrice = PACK_CONFIG.PRICES[selectedPack];
        break;
      case '4': 
        selectedPack = 'üèÖ special';
        packPrice = PACK_CONFIG.PRICES[selectedPack];
        break;
      default: 
        return repondre("‚ùå Choix invalide. Veuillez relancer la commande.");
    }

    // V√©rifier si le joueur a assez de coupons
    if (coupons < packPrice) {
      return repondre(`‚ùå Solde insuffisant. Il vous manque ${packPrice - coupons}üéüÔ∏è pour acheter ce pack.`);
    }

    // √âtape 3: Demander confirmation
    const confirmationMessage = formatConfirmation(nomAuteurMessage, selectedGame, selectedPack, packPrice, coupons);
    await zk.sendMessage(dest, { text: confirmationMessage }, { quoted: ms });

    // √âcouter la r√©ponse de confirmation
    const confirmResponse = await zk.waitForMessage(dest, auteurMessage, 30000);
    
    if (!confirmResponse) {
      return repondre("‚è±Ô∏è Temps √©coul√©. Veuillez relancer la commande.");
    }

    const confirmation = confirmResponse.text.trim().toLowerCase();
    
    if (confirmation !== 'oui' && confirmation !== 'o') {
      return repondre("‚ùå Achat annul√©.");
    }

    // G√©n√©rer les r√©compenses du pack
    const rewards = generatePackRewards(selectedGame, selectedPack);
    
    // Mettre √† jour le profil du joueur
    const newCoupons = coupons - packPrice;
    const newTokens = (parseInt(playerData.s_tokens) || 0) + rewards.bonus.tokens;
    const newGemmes = (parseInt(playerData.s_gemmes) || 0) + rewards.bonus.gemmes;
    
    const updates = {
      coupons: newCoupons.toString(),
      s_tokens: newTokens.toString(),
      s_gemmes: newGemmes.toString()
    };
    
    // Ajouter les contenus aux collections appropri√©es
    // (Cette partie d√©pend de la structure de votre base de donn√©es)
    // Pour l'exemple, nous ajoutons simplement les noms des contenus au champ items
    
    const currentItems = playerData.items && playerData.items !== 'aucun' 
      ? playerData.items.split(',') 
      : [];
    
    rewards.contents.forEach(content => {
      currentItems.push(`${content.name} (${content.rarity})`);
    });
    
    updates.items = currentItems.join(', ');
    
    await updatePlayerProfile(nomAuteurMessage, updates);

    // G√©n√©rer et envoyer le re√ßu
    const transactionId = generateTransactionId();
    const receipt = formatReceipt(
      transactionId, 
      nomAuteurMessage, 
      selectedGame, 
      selectedPack, 
      packPrice, 
      rewards, 
      newCoupons
    );
    
    await zk.sendMessage(dest, { text: receipt }, { quoted: ms });

  } catch (error) {
    console.error('Erreur commande buypack:', error);
    repondre("‚ùå Une erreur s'est produite lors de l'achat. Veuillez r√©essayer.");
  }
});